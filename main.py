import os
import json
import logging
import telebot
from telebot import types
import requests
import time
from datetime import datetime
import threading
import random

# –¢–æ–∫–µ–Ω—ã –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TOKEN         = os.environ.get('BOT_TOKEN',  '8083296880:AAHgw_w73FC7smTQA3l47DvC9ISyXca3nMQ')
GROUP_ID      = int(os.environ.get('GROUP_ID', '-1003095262397'))
MAIN_ADMIN    = int(os.environ.get('MAIN_ADMIN', '1478525032'))

# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
MAP_FILE       = "forward_map.json"
ADMIN_FILE     = "admin_data.json"
STATS_FILE     = "bot_stats.json"
AUTOMOD_FILE   = "automod_settings.json"

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
bot = telebot.TeleBot(TOKEN)

# --- –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON ---
def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default
    return default

def save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è %s: %s", path, e)

forward_map      = load_json(MAP_FILE, {})
admin_data       = load_json(ADMIN_FILE, {
    "admins": [MAIN_ADMIN], "channels": [], "banned_users": [], "muted_users": [],
    "warnings": {}, "vip_users": [], "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    "auto_replies": {}, "working_hours": {"enabled": False, "start": "09:00", "end": "18:00"},
    "flood_protection": {"enabled": True, "max_messages": 5, "time_window": 60}
})
bot_stats        = load_json(STATS_FILE, {"total_users": 0, "messages_today": 0, "last_reset": str(datetime.now().date())})
automod_settings = load_json(AUTOMOD_FILE, {"enabled": True, "banned_words": ["—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞"], "max_caps_percent": 80, "max_message_length": 4096, "auto_delete_links": False})

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ---
def is_admin(uid):   return uid in admin_data["admins"]
def is_banned(uid):  return uid in admin_data["banned_users"]
def is_muted(uid):   return uid in admin_data["muted_users"]
def is_vip(uid):     return uid in admin_data["vip_users"]

# --- –†–∞–∑–º–µ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
def main_menu_markup():
    mk = types.InlineKeyboardMarkup(row_width=2)
    mk.add(
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="user_mgmt"),
        types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã",     callback_data="chan_mgmt"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        types.InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–æ–¥–µ—Ä.", callback_data="automod")
    )
    return mk

@bot.message_handler(commands=["admin"], func=lambda m: m.chat.type=="private")
def cmd_admin(msg):
    if not is_admin(msg.from_user.id):
        return bot.send_message(msg.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    bot.send_message(msg.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=main_menu_markup())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda c: True)
def cb_handler(call):
    uid  = call.from_user.id
    data = call.data

    if data == "statistics":
        total = len(set([v["chat_id"] for v in forward_map.values()])) if forward_map else 0
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {bot_stats['messages_today']}\n"
            f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(admin_data['banned_users'])}\n"
            f"‚≠ê VIP: {len(admin_data['vip_users'])}"
        )
        return bot.edit_message_text(text, call.message.chat.id, call.message.message_id)

    if not is_admin(uid):
        return bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if data == "user_mgmt":
        mk = types.InlineKeyboardMarkup(row_width=2)
        mk.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
            types.InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞",   callback_data="rem_admin"),
            types.InlineKeyboardButton("üî® –ó–∞–±–∞–Ω–∏—Ç—å",         callback_data="ban_user"),
            types.InlineKeyboardButton("‚õî –†–∞–∑–±–∞–Ω–∏—Ç—å",       callback_data="unban_user"),
            types.InlineKeyboardButton("üîá –í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç",   callback_data="mute_user"),
            types.InlineKeyboardButton("üîä –í–∫–ª—é—á–∏—Ç—å —á–∞—Ç",    callback_data="unmute_user"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ",         callback_data="back_main")
        )
        return bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=mk)

    # –ö–∞–Ω–∞–ª—ã
    if data == "chan_mgmt":
        mk = types.InlineKeyboardMarkup(row_width=2)
        mk.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",  callback_data="rem_channel"),
            types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ",        callback_data="back_main")
        )
        return bot.edit_message_text("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=mk)

    # –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è
    if data == "automod":
        mk = types.InlineKeyboardMarkup(row_width=2)
        mk.add(
            types.InlineKeyboardButton(
                f"üü¢ {'–í—ã–∫–ª' if automod_settings['enabled'] else '–í–∫–ª'} –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                callback_data="toggle_automod"
            ),
            types.InlineKeyboardButton("‚úèÔ∏è –°–ª–æ–≤–∞ –±–∞–Ω", callback_data="edit_banned_words"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ",    callback_data="back_main")
        )
        return bot.edit_message_text("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏:", call.message.chat.id, call.message.message_id, reply_markup=mk)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_main":
        return bot.edit_message_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äì –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# (–ó–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–µ—Å—ã–ª–∫–∏, –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    logging.info("üöÄ Bot starting...")
    bot.infinity_polling(none_stop=True)
