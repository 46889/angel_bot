import os
import json
import logging
import telebot
from telebot import types
import requests

TOKEN = "8083296880:AAHgw_w73FC7smTQA3l47DvC9ISyXca3nMQ"
GROUP_ID = -1003095262397
MAP_FILE = "forward_map.json"
ADMIN_FILE = "admin_data.json"

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

bot = telebot.TeleBot(TOKEN)

# –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
MAIN_ADMIN = 1478525032

# –ó–∞–≥—Ä—É–∑–∫–∞ index map
if os.path.exists(MAP_FILE):
    try:
        with open(MAP_FILE, "r", encoding="utf-8") as f:
            forward_map = json.load(f)
    except Exception:
        forward_map = {}
else:
    forward_map = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
if os.path.exists(ADMIN_FILE):
    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as f:
            admin_data = json.load(f)
    except Exception:
        admin_data = {"admins": [MAIN_ADMIN], "channels": [], "banned_users": []}
else:
    admin_data = {"admins": [MAIN_ADMIN], "channels": [], "banned_users": []}

def save_map():
    try:
        with open(MAP_FILE, "w", encoding="utf-8") as f:
            json.dump(forward_map, f, ensure_ascii=False)
    except Exception as e:
        logging.exception("save_map error: %s", e)

def save_admin_data():
    try:
        with open(ADMIN_FILE, "w", encoding="utf-8") as f:
            json.dump(admin_data, f, ensure_ascii=False)
    except Exception as e:
        logging.exception("save_admin_data error: %s", e)

def is_admin(user_id):
    return user_id in admin_data["admins"]

def is_banned(user_id):
    return user_id in admin_data["banned_users"]

def extract_channel_username(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏"""
    if "t.me/" in url:
        return "@" + url.split("t.me/")[-1]
    return url

def check_user_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    for channel_url in admin_data["channels"]:
        channel_username = extract_channel_username(channel_url)
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={channel_username}&user_id={user_id}"
        try:
            response = requests.get(url)
            result = response.json()
            
            if result["ok"]:
                status = result["result"]["status"]
                if status not in ["member", "administrator", "creator"]:
                    return False
            else:
                return False
        except:
            return False
    return True

def check_bot_in_group():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: –±–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º."""
    try:
        me = bot.get_me()
        member = bot.get_chat_member(GROUP_ID, me.id)
        status = member.status if hasattr(member, "status") else str(member)
        is_admin = status in ("administrator", "creator")
        logging.info("Bot status in group %s: %s", GROUP_ID, status)
        return True, is_admin, status
    except Exception as e:
        logging.exception("check_bot_in_group error: %s", e)
        return False, False, str(e)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
exists, is_admin_bot, status = check_bot_in_group()
if not exists:
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ. –ü—Ä–æ–≤–µ—Ä—å GROUP_ID –∏ –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
elif not is_admin_bot:
    logging.warning("–ë–æ—Ç –ù–ï –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ. –î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏/–æ—Ç–≤–µ—Ç–∞ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º (–∏–ª–∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç—å).")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
user_states = {}

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=["admin"], func=lambda m: m.chat and m.chat.type == "private")
def cmd_admin(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
    btn2 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")
    btn3 = types.InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
    btn4 = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
    btn5 = types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="ban_user")
    btn6 = types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unban_user")
    btn7 = types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels")
    btn8 = types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins")
    btn9 = types.InlineKeyboardButton("üö´ –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤", callback_data="list_bans")
    
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5, btn6)
    markup.add(btn7, btn8, btn9)
    
    bot.send_message(message.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_admin_callbacks(call):
    user_id = call.from_user.id
    
    if call.data == "check_subscription":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not admin_data["channels"]:
            bot.send_message(call.message.chat.id, "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            return
            
        if check_user_subscription(user_id):
            bot.send_message(call.message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        else:
            channels_text = "\n".join(admin_data["channels"])
            bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n{channels_text}")
        return
    
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if call.data == "add_channel":
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/channel_name):")
        user_states[user_id] = "waiting_channel_add"
        
    elif call.data == "remove_channel":
        if not admin_data["channels"]:
            bot.send_message(call.message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
            return
        channels_text = "\n".join([f"{i+1}. {ch}" for i, ch in enumerate(admin_data["channels"])])
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{channels_text}")
        user_states[user_id] = "waiting_channel_remove"
        
    elif call.data == "add_admin":
        bot.send_message(call.message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:")
        user_states[user_id] = "waiting_admin_add"
        
    elif call.data == "remove_admin":
        admins_list = [str(admin_id) for admin_id in admin_data["admins"] if admin_id != MAIN_ADMIN]
        if not admins_list:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        admins_text = "\n".join([f"{i+1}. {admin_id}" for i, admin_id in enumerate(admins_list)])
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{admins_text}")
        user_states[user_id] = "waiting_admin_remove"
        
    elif call.data == "ban_user":
        bot.send_message(call.message.chat.id, "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        user_states[user_id] = "waiting_user_ban"
        
    elif call.data == "unban_user":
        if not admin_data["banned_users"]:
            bot.send_message(call.message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç")
            return
        bans_text = "\n".join([f"{i+1}. {user_id}" for i, user_id in enumerate(admin_data["banned_users"])])
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:\n{bans_text}")
        user_states[user_id] = "waiting_user_unban"
        
    elif call.data == "list_channels":
        if admin_data["channels"]:
            channels_text = "\n".join([f"‚Ä¢ {ch}" for ch in admin_data["channels"]])
            bot.send_message(call.message.chat.id, f"üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n{channels_text}")
        else:
            bot.send_message(call.message.chat.id, "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
            
    elif call.data == "list_admins":
        admins_text = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in admin_data["admins"]])
        bot.send_message(call.message.chat.id, f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_text}")
        
    elif call.data == "list_bans":
        if admin_data["banned_users"]:
            bans_text = "\n".join([f"‚Ä¢ {user_id}" for user_id in admin_data["banned_users"]])
            bot.send_message(call.message.chat.id, f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{bans_text}")
        else:
            bot.send_message(call.message.chat.id, "üö´ –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.message_handler(func=lambda m: m.chat and m.chat.type == "private" and m.from_user.id in user_states)
def handle_admin_states(message):
    user_id = message.from_user.id
    state = user_states[user_id]
    
    if state == "waiting_channel_add":
        channel_url = message.text.strip()
        if "t.me/" not in channel_url and not channel_url.startswith('@'):
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (https://t.me/channel_name) –∏–ª–∏ @username")
            return
        if channel_url not in admin_data["channels"]:
            admin_data["channels"].append(channel_url)
            save_admin_data()
            bot.send_message(message.chat.id, f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {channel_url}")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ö–∞–Ω–∞–ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ: {channel_url}")
        del user_states[user_id]
        
    elif state == "waiting_channel_remove":
        try:
            index = int(message.text.strip()) - 1
            if 0 <= index < len(admin_data["channels"]):
                removed_channel = admin_data["channels"].pop(index)
                save_admin_data()
                bot.send_message(message.chat.id, f"‚úÖ –ö–∞–Ω–∞–ª {removed_channel} —É–¥–∞–ª–µ–Ω")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        del user_states[user_id]
        
    elif state == "waiting_admin_add":
        try:
            new_admin_id = int(message.text.strip())
            if new_admin_id not in admin_data["admins"]:
                admin_data["admins"].append(new_admin_id)
                save_admin_data()
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã")
            else:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ –∞–¥–º–∏–Ω")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        del user_states[user_id]
        
    elif state == "waiting_admin_remove":
        try:
            admins_list = [admin_id for admin_id in admin_data["admins"] if admin_id != MAIN_ADMIN]
            index = int(message.text.strip()) - 1
            if 0 <= index < len(admins_list):
                removed_admin = admins_list[index]
                admin_data["admins"].remove(removed_admin)
                save_admin_data()
                bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω {removed_admin} —É–¥–∞–ª–µ–Ω")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        del user_states[user_id]
        
    elif state == "waiting_user_ban":
        try:
            ban_user_id = int(message.text.strip())
            if ban_user_id not in admin_data["banned_users"]:
                admin_data["banned_users"].append(ban_user_id)
                save_admin_data()
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ban_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ban_user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        del user_states[user_id]
        
    elif state == "waiting_user_unban":
        try:
            index = int(message.text.strip()) - 1
            if 0 <= index < len(admin_data["banned_users"]):
                unbanned_user = admin_data["banned_users"].pop(index)
                save_admin_data()
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unbanned_user} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(
    func=lambda m: m.chat and m.chat.type == "private",
    content_types=['text', 'photo', 'voice']
)
def handle_private(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if is_banned(user_id):
        bot.send_message(message.chat.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    try:
        # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –¥—Ä.
        if message.entities:
            for ent in message.entities:
                if ent.type == "bot_command":
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ /start
                    if message.text == "/start" and admin_data["channels"]:
                        if not check_user_subscription(user_id):
                            markup = types.InlineKeyboardMarkup()
                            btn = types.InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
                            markup.add(btn)
                            channels_text = "\n".join(admin_data["channels"])
                            bot.send_message(message.chat.id, 
                                f"üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{channels_text}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", 
                                reply_markup=markup)
                            return
                    
                    bot.send_message(
                        message.chat.id,
                        " ú—ßœÄ—ü…Ø—üœØ—î  ú—ß ç —ü ”å—î å—≥ ô—îŒ∫ —≥œØ ô—îœØ—üœØ  ô—ß ç"
                    )
                    return
                    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
        if admin_data["channels"] and not check_user_subscription(user_id):
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
            markup.add(btn)
            channels_text = "\n".join(admin_data["channels"])
            bot.send_message(message.chat.id, 
                f"‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{channels_text}", 
                reply_markup=markup)
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ —Ç–∏–ø—É
        if message.photo:
            logging.info("–ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞")
            sent_msg = bot.send_photo(GROUP_ID, message.photo[-1].file_id, caption=message.caption)
            forward_map[str(sent_msg.message_id)] = {
                "chat_id": message.chat.id,
                "orig_id": message.message_id
            }
            save_map()
        elif message.voice:
            logging.info("–ü—Ä–∏–Ω—è—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞")
            sent_msg = bot.send_voice(GROUP_ID, message.voice.file_id)
            forward_map[str(sent_msg.message_id)] = {
                "chat_id": message.chat.id,
                "orig_id": message.message_id
            }
            save_map()
        else:
            logging.info("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞")
            forwarded = bot.forward_message(GROUP_ID, message.chat.id, message.message_id)
            forward_map[str(forwarded.message_id)] = {
                "chat_id": message.chat.id,
                "orig_id": message.message_id
            }
            save_map()
    except Exception as e:
        logging.exception("handle_private error: %s", e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≥—Ä—É–ø–ø—ã)
@bot.message_handler(
    func=lambda m: m.chat and m.chat.id == GROUP_ID and m.reply_to_message is not None,
    content_types=['text', 'photo', 'voice']
)
def handle_group_reply(message):
    try:
        key = str(message.reply_to_message.message_id)
        data = forward_map.get(key)
        if not data:
            return
        target_chat = data["chat_id"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        if is_banned(target_chat):
            bot.send_message(GROUP_ID, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", reply_to_message_id=message.message_id)
            return
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —Ç–∏–ø—É
        if message.photo:
            logging.info("–û—Ç–≤–µ—Ç —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            bot.send_photo(target_chat, message.photo[-1].file_id, caption=message.caption)
        elif message.voice:
            logging.info("–û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            bot.send_voice(target_chat, message.voice.file_id)
        else:
            logging.info("–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            bot.send_message(target_chat, message.text)
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞–ø—ã
        forward_map.pop(key)
        save_map()
    except Exception as e:
        logging.exception("handle_group_reply error: %s", e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(commands=["start"], func=lambda m: m.chat and m.chat.id == GROUP_ID)
def handle_group_start(message):
    username = getattr(message.from_user, "username", None)
    if username:
        usertag = f"@{username}"
    else:
        usertag = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    bot.send_message(
        GROUP_ID,
        f"{usertag} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞",
        reply_to_message_id=message.message_id
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏–≤–∞—Ç)
@bot.message_handler(commands=["status"], func=lambda m: m.chat and m.chat.type == "private")
def cmd_status(message):
    ok, is_admin_bot, status = check_bot_in_group()
    out = (
        f"Group access: {'ok' if ok else 'error'}\n"
        f"Bot admin: {'yes' if is_admin_bot else 'no'}\n"
        f"Status: {status}"
    )
    bot.send_message(message.chat.id, out)

if __name__ == "__main__":
    logging.info("Starting bot polling...")
    bot.infinity_polling()
